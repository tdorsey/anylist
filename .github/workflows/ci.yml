name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION_LATEST: '20.x'
  NODE_VERSION_LTS: '18.x'
  NODE_VERSION_MINIMUM: '16.x'

jobs:
  # Fast feedback job - linting and basic checks
  lint:
    name: 'Lint & Format Check'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ env.NODE_VERSION_LATEST }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION_LATEST }}
        cache: 'yarn'
        
    - name: Install dependencies
      run: yarn install --frozen-lockfile
      
    - name: Run linting
      run: npm run lint
      
    # Upload lint results for later steps
    - name: Archive lint results
      if: always()
      run: echo "Lint completed" > lint-results.txt
      
    - name: Upload lint results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: lint-results
        path: lint-results.txt
        retention-days: 1

  # Unit tests - run after linting passes
  unit-tests:
    name: 'Unit Tests'
    runs-on: ubuntu-latest
    needs: lint
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'
        
    - name: Install dependencies
      run: yarn install --frozen-lockfile
      
    - name: Run unit tests
      run: npm run test:unit
      env:
        NODE_ENV: test
        CI: true
      
    - name: Generate test coverage (Node.js 20.x only)
      if: matrix.node-version == '20.x'
      run: npm run test:coverage
      env:
        NODE_ENV: test
        CI: true
        
    - name: Upload coverage reports
      if: matrix.node-version == '20.x'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: coverage/
        retention-days: 7
        
    # Future: Upload to codecov when ready
    # - name: Upload coverage to Codecov
    #   if: matrix.node-version == '20.x'
    #   uses: codecov/codecov-action@v3
    #   with:
    #     file: coverage/lcov.info
    #     fail_ci_if_error: true
    #     env_vars: NODE_VERSION

  # Integration tests - more expensive, only run after unit tests pass
  integration-tests:
    name: 'Integration Tests'
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ env.NODE_VERSION_LATEST }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION_LATEST }}
        cache: 'yarn'
        
    - name: Install dependencies
      run: yarn install --frozen-lockfile
      
    - name: Run integration tests
      run: npm run test:integration
      env:
        NODE_ENV: test
        CI: true
        # Add any integration test specific environment variables here
        # ANYLIST_TEST_EMAIL: ${{ secrets.ANYLIST_TEST_EMAIL }}
        # ANYLIST_TEST_PASSWORD: ${{ secrets.ANYLIST_TEST_PASSWORD }}

  # Documentation and build verification - run in parallel with tests but after lint
  build-and-docs:
    name: 'Build & Documentation'
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ env.NODE_VERSION_LATEST }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION_LATEST }}
        cache: 'yarn'
        
    - name: Install dependencies
      run: yarn install --frozen-lockfile
      
    - name: Generate documentation
      run: npm run document
      
    - name: Verify build artifacts
      run: |
        if [ ! -d "lib" ]; then
          echo "❌ lib directory not found"
          exit 1
        fi
        echo "✅ lib directory exists with $(ls -la lib | wc -l) files"
        
        if [ ! -d "docs" ]; then
          echo "❌ docs directory not found after documentation generation"
          exit 1
        fi
        echo "✅ docs directory exists with $(ls -la docs | wc -l) files"
        
    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/
        retention-days: 30

  # Final summary job - only runs if all other jobs succeed
  ci-success:
    name: 'CI Success'
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, build-and-docs]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        if [[ "${{ needs.lint.result }}" != "success" ]]; then
          echo "❌ Linting failed"
          exit 1
        fi
        if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
          echo "❌ Unit tests failed"
          exit 1
        fi
        if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
          echo "❌ Integration tests failed"
          exit 1
        fi
        if [[ "${{ needs.build-and-docs.result }}" != "success" ]]; then
          echo "❌ Build and documentation failed"
          exit 1
        fi
        echo "✅ All CI jobs completed successfully!"
        
    - name: Summary
      run: |
        echo "## CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "✅ Linting: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
        echo "✅ Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "✅ Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "✅ Build & Docs: ${{ needs.build-and-docs.result }}" >> $GITHUB_STEP_SUMMARY