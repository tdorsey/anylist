name: Release

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      dry_run:
        description: 'Dry run (do not actually publish)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'
  REGISTRY_URL: 'https://registry.npmjs.org'

jobs:
  # Run full CI before release
  ci-check:
    name: 'Pre-release CI Check'
    uses: ./.github/workflows/ci.yml
    
  release:
    name: 'Release & Publish'
    runs-on: ubuntu-latest
    needs: ci-check
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && contains(github.event.head_commit.message, '[release]'))
    
    environment:
      name: npm-publish
      url: https://www.npmjs.com/package/anylist
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        registry-url: ${{ env.REGISTRY_URL }}
        
    - name: Install dependencies
      run: yarn install --frozen-lockfile
      
    - name: Run full test suite
      run: npm test
      env:
        NODE_ENV: production
        
    - name: Generate documentation
      run: npm run document
      
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Determine release type
      id: release-type
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
          echo "dry_run=${{ github.event.inputs.dry_run }}" >> $GITHUB_OUTPUT
        else
          # Auto-detect from commit message
          if [[ "${{ github.event.head_commit.message }}" == *"[major]"* ]]; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.head_commit.message }}" == *"[minor]"* ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
          else
            echo "type=patch" >> $GITHUB_OUTPUT
          fi
          echo "dry_run=false" >> $GITHUB_OUTPUT
        fi

    - name: Show release information
      run: |
        echo "## Release Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Release Type**: ${{ steps.release-type.outputs.type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Dry Run**: ${{ steps.release-type.outputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Current Version**: $(node -p "require('./package.json').version")" >> $GITHUB_STEP_SUMMARY
        echo "- **Node.js Version**: ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry**: ${{ env.REGISTRY_URL }}" >> $GITHUB_STEP_SUMMARY
      
    # Ready for production release - uncomment when NPM_TOKEN is available
    - name: Release Status
      run: |
        echo "ðŸš§ Release workflow is configured but publishing is disabled"
        echo ""
        echo "To enable automatic publishing:"
        echo "1. Create an 'npm-publish' environment in GitHub repository settings"
        echo "2. Add NPM_TOKEN secret to the 'npm-publish' environment"
        echo "3. Ensure the token has publish permissions for the 'anylist' package"
        echo "4. Uncomment the publishing steps below"
        echo ""
        echo "Current configuration:"
        echo "- Release type: ${{ steps.release-type.outputs.type }}"
        echo "- Dry run: ${{ steps.release-type.outputs.dry_run }}"
        echo "- Environment: npm-publish (not yet configured)"
      
    # Uncomment these steps when NPM_TOKEN is available in the npm-publish environment:
    # 
    # - name: Bump version
    #   if: steps.release-type.outputs.dry_run != 'true'
    #   run: |
    #     NEW_VERSION=$(npm version ${{ steps.release-type.outputs.type }} --no-git-tag-version)
    #     echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
    #     echo "New version: $NEW_VERSION"
    #   
    # - name: Create and push git tag
    #   if: steps.release-type.outputs.dry_run != 'true'
    #   run: |
    #     git add package.json package-lock.json
    #     git commit -m "chore: release $NEW_VERSION"
    #     git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
    #     git push origin main --follow-tags
    #     
    # - name: Publish to npm
    #   if: steps.release-type.outputs.dry_run != 'true'
    #   run: npm publish --access public
    #   env:
    #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    #     NPM_CONFIG_PROVENANCE: true
    #     
    # - name: Create GitHub release
    #   if: steps.release-type.outputs.dry_run != 'true'
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: ${{ env.NEW_VERSION }}
    #     release_name: Release ${{ env.NEW_VERSION }}
    #     draft: false
    #     prerelease: false